"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.promptGeneratorInput = void 0;
const prompts_1 = __importDefault(require("prompts"));
/**
 * Prompt the user for the required properties for an adaptation project.
 *
 * @param defaults optional default values for the prompts
 * @param defaults.id initial id to be used for the new adaptation id prompt
 * @param defaults.reference initial id used for the original application id prompt
 * @param defaults.url initial url used for the target url prompt
 * @returns a configuration for the adp writer
 */
function promptGeneratorInput({ id, reference, url } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const app = yield (0, prompts_1.default)([
            {
                type: 'select',
                choices: [
                    { title: "CUSTOMER_BASE" /* flexLayer.CUSTOMER_BASE */, value: "CUSTOMER_BASE" /* flexLayer.CUSTOMER_BASE */ },
                    { title: "VENDOR" /* flexLayer.VENDOR */, value: "VENDOR" /* flexLayer.VENDOR */ }
                ],
                name: 'layer',
                message: 'Flex layer:'
            },
            {
                type: 'text',
                name: 'id',
                message: (_prev, values) => {
                    if (values.layer === "CUSTOMER_BASE" /* flexLayer.CUSTOMER_BASE */) {
                        return 'New adaptation id (CUSTOMER_BASE selected, customer prefix will be automatically added to the id):';
                    }
                    else {
                        return 'New adaptation id:';
                    }
                },
                initial: id,
                format: (input, values) => {
                    if (values.layer === "CUSTOMER_BASE" /* flexLayer.CUSTOMER_BASE */ && !input.startsWith('customer.')) {
                        return `customer.${input}`;
                    }
                    else {
                        return input;
                    }
                },
                validate: (input) => (input === null || input === void 0 ? void 0 : input.length) > 0
            },
            {
                type: 'text',
                name: 'reference',
                message: 'Original application id:',
                initial: reference,
                validate: (input) => (input === null || input === void 0 ? void 0 : input.length) > 0
            },
            {
                type: 'text',
                name: 'title',
                message: 'Application title:'
            }
        ]);
        const target = yield (0, prompts_1.default)([
            {
                type: 'text',
                name: 'url',
                message: 'Target system url:',
                initial: url,
                validate: (input) => (input === null || input === void 0 ? void 0 : input.length) > 0
            }
        ]);
        return { app, target };
    });
}
exports.promptGeneratorInput = promptGeneratorInput;
//# sourceMappingURL=prompt.js.map