import type { ToolsLogger } from '@sap-ux/logger';
import type { AdpPreviewConfig, DescriptorVariant } from '../types';
import type { NextFunction, Request, Response } from 'express';
import type { MergedAppDescriptor } from '@sap-ux/axios-extension';
import type { ReaderCollection } from '@ui5/fs';
import type { UI5FlexLayer } from '@sap-ux/project-access';
/**
 * Instance of an adaptation project handling requests and data transformation.
 */
export declare class AdpPreview {
    private readonly config;
    private readonly project;
    private readonly logger;
    /**
     * Merged descriptor variant with reference app manifest
     */
    private mergedDescriptor;
    /**
     * @returns merged manifest.
     */
    get descriptor(): MergedAppDescriptor;
    /**
     * @returns a list of resources required to the adaptation project as well as the original app.
     */
    get resources(): {
        [x: string]: string;
    };
    /**
     * Constructor taking the config and a logger as input.
     *
     * @param config adp config
     * @param project reference to the root of the project
     * @param logger logger instance
     */
    constructor(config: AdpPreviewConfig, project: ReaderCollection, logger: ToolsLogger);
    /**
     * Fetch all required configurations from the backend and initialize all configurations.
     *
     * @param descriptorVariant descriptor variant from the project
     * @returns the UI5 flex layer for which editing is enabled
     */
    init(descriptorVariant: DescriptorVariant): Promise<UI5FlexLayer>;
    /**
     * Proxy for the merged application manifest.json and blocking of preload files.
     *
     * @param req incoming request
     * @param res outgoing response object
     * @param next next middleware that is to be called if the request cannot be handled
     */
    proxy(req: Request, res: Response, next: NextFunction): Promise<void>;
}
//# sourceMappingURL=adp-preview.d.ts.map