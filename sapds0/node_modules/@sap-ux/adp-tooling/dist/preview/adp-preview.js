"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdpPreview = void 0;
const yazl_1 = require("yazl");
const system_access_1 = require("@sap-ux/system-access");
/**
 * Create a buffer based on the given zip file object.
 *
 * @param zip object representing a zip file
 * @returns a buffer
 */
function createBuffer(zip) {
    var _a, e_1, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        yield new Promise((resolve) => {
            zip.end({ forceZip64Format: false }, () => {
                resolve();
            });
        });
        const chunks = [];
        try {
            for (var _d = true, _e = __asyncValues(zip.outputStream), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                _c = _f.value;
                _d = false;
                try {
                    const chunk = _c;
                    chunks.push(chunk);
                }
                finally {
                    _d = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return Buffer.concat(chunks);
    });
}
/**
 * Instance of an adaptation project handling requests and data transformation.
 */
class AdpPreview {
    /**
     * @returns merged manifest.
     */
    get descriptor() {
        if (this.mergedDescriptor) {
            return this.mergedDescriptor;
        }
        else {
            throw new Error('Not initialized');
        }
    }
    /**
     * @returns a list of resources required to the adaptation project as well as the original app.
     */
    get resources() {
        if (this.mergedDescriptor) {
            const resources = {
                [this.mergedDescriptor.name]: this.mergedDescriptor.url
            };
            this.mergedDescriptor.asyncHints.libs.forEach((lib) => {
                var _a;
                if ((_a = lib.url) === null || _a === void 0 ? void 0 : _a.url) {
                    resources[lib.name] = lib.url.url;
                }
            });
            return resources;
        }
        else {
            throw new Error('Not initialized');
        }
    }
    /**
     * Constructor taking the config and a logger as input.
     *
     * @param config adp config
     * @param project reference to the root of the project
     * @param logger logger instance
     */
    constructor(config, project, logger) {
        this.config = config;
        this.project = project;
        this.logger = logger;
    }
    /**
     * Fetch all required configurations from the backend and initialize all configurations.
     *
     * @param descriptorVariant descriptor variant from the project
     * @returns the UI5 flex layer for which editing is enabled
     */
    init(descriptorVariant) {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = yield (0, system_access_1.createAbapServiceProvider)(this.config.target, { ignoreCertErrors: this.config.ignoreCertErrors }, true, this.logger);
            const lrep = provider.getLayeredRepository();
            const zip = new yazl_1.ZipFile();
            const files = yield this.project.byGlob('**/*.*');
            for (const file of files) {
                zip.addBuffer(yield file.getBuffer(), file.getPath().substring(1));
            }
            const buffer = yield createBuffer(zip);
            // validate namespace & layer combination and fetch csrf token
            yield lrep.isExistingVariant(descriptorVariant.namespace, descriptorVariant.layer);
            this.mergedDescriptor = (yield lrep.mergeAppDescriptorVariant(buffer))[descriptorVariant.id];
            return descriptorVariant.layer;
        });
    }
    /**
     * Proxy for the merged application manifest.json and blocking of preload files.
     *
     * @param req incoming request
     * @param res outgoing response object
     * @param next next middleware that is to be called if the request cannot be handled
     */
    proxy(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            if (req.path === '/manifest.json') {
                res.status(200);
                res.send(JSON.stringify(this.descriptor.manifest, undefined, 2));
            }
            else if (req.path === '/Component-preload.js') {
                res.status(404).send();
            }
            else {
                const files = yield this.project.byGlob(req.path);
                if (files.length === 1) {
                    res.status(200).send(yield files[0].getString());
                }
                else {
                    next();
                }
            }
        });
    }
}
exports.AdpPreview = AdpPreview;
//# sourceMappingURL=adp-preview.js.map