"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = void 0;
const path_1 = require("path");
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const ui5_config_1 = require("@sap-ux/ui5-config");
/**
 * Set default values for optional properties.
 *
 * @param config configuration provided by the calling middleware
 * @returns enhanced configuration with default values
 */
function setDefaults(config) {
    var _a, _b, _c, _d, _e;
    var _f, _g, _h, _j;
    const configWithDefaults = {
        app: Object.assign({}, config.app),
        target: Object.assign({}, config.target),
        ui5: Object.assign({}, config.ui5)
    };
    (_a = (_f = configWithDefaults.app).title) !== null && _a !== void 0 ? _a : (_f.title = `Adaptation of ${config.app.reference}`);
    (_b = (_g = configWithDefaults.app).layer) !== null && _b !== void 0 ? _b : (_g.layer = 'CUSTOMER_BASE');
    (_c = configWithDefaults.package) !== null && _c !== void 0 ? _c : (configWithDefaults.package = config.package ? Object.assign({}, config.package) : {});
    (_d = (_h = configWithDefaults.package).name) !== null && _d !== void 0 ? _d : (_h.name = config.app.id.toLowerCase().replace(/\./g, '-'));
    (_e = (_j = configWithDefaults.package).description) !== null && _e !== void 0 ? _e : (_j.description = configWithDefaults.app.title);
    return configWithDefaults;
}
/**
 * Writes the adp-project template to the memfs editor instance.
 *
 * @param basePath - the base path
 * @param config - the writer configuration
 * @param fs - the memfs editor instance
 * @returns the updated memfs editor instance
 */
function generate(basePath, config, fs) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!fs) {
            fs = (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
        }
        const tmplPath = (0, path_1.join)(__dirname, '../../templates');
        const fullConfig = setDefaults(config);
        fs.copyTpl((0, path_1.join)(tmplPath, '**/*.*'), (0, path_1.join)(basePath), fullConfig, undefined, {
            globOptions: { dot: true },
            processDestinationPath: (filePath) => filePath.replace(/gitignore.tmpl/g, '.gitignore')
        });
        // ui5.yaml
        const ui5ConfigPath = (0, path_1.join)(basePath, 'ui5.yaml');
        const ui5Config = yield ui5_config_1.UI5Config.newInstance(fs.read(ui5ConfigPath));
        ui5Config.addCustomMiddleware([
            {
                name: 'preview-middleware',
                afterMiddleware: 'compression',
                configuration: {
                    adp: {
                        target: fullConfig.target,
                        ignoreCertErrors: false
                    }
                }
            },
            {
                name: 'ui5-proxy-middleware',
                afterMiddleware: 'preview-middleware',
                configuration: {
                    ui5: {
                        path: ['/resources', '/test-resources'],
                        url: 'https://ui5.sap.com'
                    }
                }
            },
            {
                name: 'backend-proxy-middleware',
                afterMiddleware: 'preview-middleware',
                configuration: {
                    backend: Object.assign(Object.assign({}, fullConfig.target), { path: '/sap' }),
                    options: {
                        secure: true
                    }
                }
            }
        ]);
        fs.write(ui5ConfigPath, ui5Config.toString());
        return fs;
    });
}
exports.generate = generate;
//# sourceMappingURL=index.js.map