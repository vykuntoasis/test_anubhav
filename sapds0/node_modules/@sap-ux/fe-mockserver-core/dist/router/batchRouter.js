"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.batchRouter = exports.isPartChangeSet = void 0;
const http = __importStar(require("http"));
const odataRequest_1 = __importDefault(require("../request/odataRequest"));
const batchParser_1 = require("./batchParser");
function isPartChangeSet(part) {
    return part.isChangeSet;
}
exports.isPartChangeSet = isPartChangeSet;
const NL = '\r\n';
async function handlePart(partDefinition, dataAccess, boundary, tenantId, globalHeaders) {
    const partRequest = new odataRequest_1.default({ ...partDefinition, tenantId: tenantId }, dataAccess);
    await partRequest.handleRequest();
    let batchResponse = '';
    batchResponse += `--${boundary}${NL}`;
    batchResponse += `Content-Type: application/http${NL}`;
    batchResponse += `Content-Transfer-Encoding: binary${NL}`;
    if (partDefinition.contentId) {
        batchResponse += `Content-ID: ${partDefinition.contentId}${NL}`;
    }
    batchResponse += NL;
    const responseData = partRequest.getResponseData();
    batchResponse += `HTTP/1.1 ${partRequest.statusCode} ${http.STATUS_CODES[partRequest.statusCode]}${NL}`;
    for (const headerName in partRequest.responseHeaders) {
        batchResponse += `${headerName}: ${partRequest.responseHeaders[headerName]}${NL}`;
    }
    for (const headerName in partRequest.globalResponseHeaders) {
        globalHeaders[headerName] = partRequest.globalResponseHeaders[headerName];
    }
    batchResponse += NL; // End of part header
    if (responseData) {
        batchResponse += responseData;
        batchResponse += NL; // End of body content
    }
    batchResponse += NL;
    return batchResponse;
}
/**
 * Creates a router dedicated to batch request handling.
 * @param dataAccess the current DataAccess object
 * @returns a router function for batch handling
 */
function batchRouter(dataAccess) {
    return async (req, res, next) => {
        try {
            const boundary = (0, batchParser_1.getBoundary)(req.headers['content-type']);
            const body = req.body;
            const batchData = (0, batchParser_1.parseBatch)(new batchParser_1.BatchContent(body), boundary);
            const globalHeaders = {};
            let batchResponse = '';
            for (const part of batchData.parts) {
                if (isPartChangeSet(part)) {
                    batchResponse += `--${batchData.boundary}${NL}`;
                    batchResponse += `Content-Type: multipart/mixed; boundary=${part.boundary}${NL}`;
                    batchResponse += NL;
                    for (const changeSetPart of part.parts) {
                        batchResponse += await handlePart(changeSetPart, dataAccess, part.boundary, req.tenantId, globalHeaders);
                    }
                    batchResponse += `--${part.boundary}--${NL}`;
                }
                else {
                    batchResponse += await handlePart(part, dataAccess, batchData.boundary, req.tenantId, globalHeaders);
                }
            }
            batchResponse += `--${batchData.boundary}--${NL}`;
            res.statusCode = 200;
            for (const globalHeaderName in globalHeaders) {
                res.setHeader(globalHeaderName, globalHeaders[globalHeaderName]);
            }
            res.setHeader('Content-Type', `multipart/mixed; boundary=${batchData.boundary}`);
            res.setHeader('odata-version', dataAccess.getMetadata().getVersion());
            res.write(batchResponse);
            res.end();
        }
        catch (e) {
            next(e);
        }
    };
}
exports.batchRouter = batchRouter;
//# sourceMappingURL=batchRouter.js.map