"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlpSandbox = void 0;
const ejs_1 = require("ejs");
const fs_1 = require("fs");
const path_1 = require("path");
const express_1 = require("express");
const flex_1 = require("./flex");
/**
 * Default theme
 */
const DEFAULT_THEME = 'sap_horizon';
/**
 * Default path for mounting the local FLP.
 */
const DEFAULT_PATH = '/test/flp.html';
/**
 * Default name of the locate reuse libs script.
 */
const DEFAULT_LOCATE_LIBS_FILENAME = 'locate-reuse-libs.js';
/**
 * Default intent
 */
const DEFAULT_INTENT = {
    object: 'app',
    action: 'preview'
};
/**
 * Class handling preview of a sandbox FLP.
 */
class FlpSandbox {
    /**
     * Constructor setting defaults and keeping reference to workspace resources.
     *
     * @param config configuration from the ui5.yaml
     * @param project reference to the project provided by the UI5 CLI
     * @param utils middleware utilities provided by the UI5 CLI
     * @param logger logger instance
     */
    constructor(config, project, utils, logger) {
        var _a, _b, _c;
        this.project = project;
        this.utils = utils;
        this.logger = logger;
        this.config = {
            path: (_a = config.path) !== null && _a !== void 0 ? _a : DEFAULT_PATH,
            intent: (_b = config.intent) !== null && _b !== void 0 ? _b : DEFAULT_INTENT,
            apps: (_c = config.apps) !== null && _c !== void 0 ? _c : [],
            rta: config.rta,
            libs: config.libs
        };
        if (!this.config.path.startsWith('/')) {
            this.config.path = `/${this.config.path}`;
        }
        logger.debug(`Config: ${JSON.stringify(this.config)}`);
        this.router = (0, express_1.Router)();
    }
    /**
     * Initialize the FLP sandbox router.
     *
     * @param manifest application manifest
     * @param componentId optional componentId e.g. for adaptation projects
     * @param resources optional additional resource mappings
     */
    init(manifest, componentId, resources = {}) {
        var _a, _b, _c, _d, _e, _f, _g;
        return __awaiter(this, void 0, void 0, function* () {
            const flex = this.createFlexHandler();
            const supportedThemes = (_b = (_a = manifest['sap.ui5']) === null || _a === void 0 ? void 0 : _a.supportedThemes) !== null && _b !== void 0 ? _b : [DEFAULT_THEME];
            this.templateConfig = {
                basePath: (_c = (0, path_1.relative)((0, path_1.dirname)(this.config.path), '/')) !== null && _c !== void 0 ? _c : '.',
                apps: {},
                ui5: {
                    libs: Object.keys((_f = (_e = (_d = manifest['sap.ui5']) === null || _d === void 0 ? void 0 : _d.dependencies) === null || _e === void 0 ? void 0 : _e.libs) !== null && _f !== void 0 ? _f : {}).join(','),
                    theme: supportedThemes.includes(DEFAULT_THEME) ? DEFAULT_THEME : supportedThemes[0],
                    flex,
                    resources: Object.assign({}, resources)
                },
                locateReuseLibsScript: this.config.libs
                    ? `./${DEFAULT_LOCATE_LIBS_FILENAME}`
                    : yield this.findLocateReuseLibsScript()
            };
            this.addApp(manifest, {
                componentId,
                target: (_g = resources[componentId !== null && componentId !== void 0 ? componentId : manifest['sap.app'].id]) !== null && _g !== void 0 ? _g : this.templateConfig.basePath,
                local: '.',
                intent: this.config.intent
            });
            this.addStandardRoutes();
            this.addRoutesForAdditionalApps();
            this.logger.info(`Initialized for app ${manifest['sap.app'].id}`);
            this.logger.debug(`Configured apps: ${JSON.stringify(this.templateConfig.apps)}`);
        });
    }
    /**
     * Add routes for html and scripts required for a local FLP.
     */
    addStandardRoutes() {
        // add route for the sandbox.html
        this.router.get(this.config.path, (req, res) => {
            var _a, _b;
            const config = Object.assign({}, this.templateConfig);
            const fioriToolsRtaMode = req.query['fiori-tools-rta-mode'];
            if (fioriToolsRtaMode) {
                if ((_a = this.config.rta) === null || _a === void 0 ? void 0 : _a.layer) {
                    config.flex = {
                        layer: (_b = this.config.rta) === null || _b === void 0 ? void 0 : _b.layer,
                        developerMode: fioriToolsRtaMode === 'forAdaptation'
                    };
                }
                else {
                    this.logger.error('Fiori tools RTA mode could not be started because the RTA layer is missing.');
                }
            }
            const template = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../templates/flp/sandbox.html'), 'utf-8');
            const html = (0, ejs_1.render)(template, config);
            // if livereload is enabled, don't send it but let other middleware modify the content
            if (res._livereload) {
                res.write(html);
                res.end();
            }
            else {
                res.status(200).contentType('html').send(html);
            }
        });
        // add route for locate-reuse-libs if requested
        if (this.config.libs && this.templateConfig.locateReuseLibsScript) {
            const pathParts = this.config.path.split('/');
            pathParts.pop();
            pathParts.push(DEFAULT_LOCATE_LIBS_FILENAME);
            this.router.get(pathParts.join('/'), (_req, res) => {
                const script = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../templates/flp/locate-reuse-libs.js'), 'utf-8');
                res.status(200).contentType('text/javascript').send(script);
            });
        }
    }
    /**
     * Try finding a locate-reuse-libs script in the project.
     *
     * @returns the location of the locate-reuse-libs script or undefined.
     */
    findLocateReuseLibsScript() {
        return __awaiter(this, void 0, void 0, function* () {
            const files = yield this.project.byGlob('**/locate-reuse-libs.js');
            if (files.length > 0) {
                return files[0].getPath();
            }
            else {
                return undefined;
            }
        });
    }
    /**
     * Add additional routes for apps also to be shown in the local FLP.
     */
    addRoutesForAdditionalApps() {
        for (const app of this.config.apps) {
            if (app.local) {
                const manifest = JSON.parse((0, fs_1.readFileSync)((0, path_1.join)(app.local, 'webapp/manifest.json'), 'utf-8'));
                this.addApp(manifest, app);
                this.router.use(app.target, (0, express_1.static)((0, path_1.join)(app.local, 'webapp')));
                this.logger.info(`Serving additional application at ${app.target} from ${app.local}`);
            }
        }
    }
    /**
     * Create required routes for flex.
     *
     * @returns template configuration for flex.
     */
    createFlexHandler() {
        const workspaceConnectorPath = '/preview/WorkspaceConnector';
        this.router.get(`/resources${workspaceConnectorPath}.js`, (_req, res) => {
            res.status(200)
                .contentType('text/javascript')
                .send((0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../templates/flp/workspaceConnector.js'), 'utf-8'));
        });
        const api = '/preview/api/changes';
        this.router.use(api, (0, express_1.json)());
        this.router.get(api, (_req, res) => __awaiter(this, void 0, void 0, function* () {
            res.status(200)
                .contentType('application/json')
                .send(yield (0, flex_1.readChanges)(this.project, this.logger));
        }));
        this.router.post(api, (req, res) => __awaiter(this, void 0, void 0, function* () {
            try {
                const { success, message } = (0, flex_1.writeChange)(req.body, this.utils.getProject().getSourcePath(), this.logger);
                if (success) {
                    res.status(200).send(message);
                }
                else {
                    res.status(400).send('INVALID_DATA');
                }
            }
            catch (error) {
                res.status(500).send(error.message);
            }
        }));
        this.router.delete(api, (req, res) => __awaiter(this, void 0, void 0, function* () {
            try {
                const { success, message } = (0, flex_1.deleteChange)(req.body, this.utils.getProject().getSourcePath(), this.logger);
                if (success) {
                    res.status(200).send(message);
                }
                else {
                    res.status(400).send('INVALID_DATA');
                }
            }
            catch (error) {
                res.status(500).send(error.message);
            }
        }));
        return [
            {
                applyConnector: workspaceConnectorPath,
                writeConnector: workspaceConnectorPath,
                custom: true
            }
        ];
    }
    /**
     * Add an application to the local FLP preview.
     *
     * @param manifest manifest of the additional target app
     * @param app configuration for the preview
     */
    addApp(manifest, app) {
        var _a, _b, _c, _d, _e, _f;
        const id = manifest['sap.app'].id;
        (_a = app.intent) !== null && _a !== void 0 ? _a : (app.intent = {
            object: id.replace(/\./g, ''),
            action: 'preview'
        });
        this.templateConfig.ui5.resources[id] = app.target;
        this.templateConfig.apps[`${(_b = app.intent) === null || _b === void 0 ? void 0 : _b.object}-${(_c = app.intent) === null || _c === void 0 ? void 0 : _c.action}`] = {
            title: (_d = manifest['sap.app'].title) !== null && _d !== void 0 ? _d : id,
            description: (_e = manifest['sap.app'].description) !== null && _e !== void 0 ? _e : '',
            additionalInformation: `SAPUI5.Component=${(_f = app.componentId) !== null && _f !== void 0 ? _f : id}`,
            applicationType: 'URL',
            url: app.target
        };
    }
}
exports.FlpSandbox = FlpSandbox;
//# sourceMappingURL=flp.js.map